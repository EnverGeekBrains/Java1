package ru.geekbrains.java1.dz_Enver_Eskendarov.dz4;

import java.util.Random;
import java.util.Scanner;


public class Dz_4 {

    private static char[][] table = new char[5][5]; // Инициализация игровой таблицы 5x5
    private static Scanner sc = new Scanner(System.in);
    private static Random rand = new Random();

    public static void initTable() {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                table[i][j] = '*';
            }
        }
    } // заполняем ячейки ' * '

    public static void printTable() {
        System.out.println("  1 2 3 4 5");
        for (int i = 0; i < 5; i++) {
            System.out.print((i + 1) + " ");
            for (int j = 0; j < 5; j++) {
                System.out.print(table[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    } // выводим игровую таблицу в консоль

    public static void main(String[] args) {
        initTable();
        printTable();

        while (true) {
            goesPlayer();
            printTable(); // печать поля
            if (checkForWin('X')) { // проверка победы игрока
                System.out.println("Победил игрок");
                break;
            }
            if (fullTable()) break; // если поле заполнилось, завершаем игру
            goesComputer(); // ход компьютера
            printTable();
            if (checkForWin('O')) { // проверка победы компьютера
                System.out.println("Победил компьютер");
                break;
            }
            if (fullTable()) break;
        }
        System.out.println("Game Over");
    }


    private static boolean checkForWin(char c) {

        for (int i = 0; i < 5; i++) {           // проходим по массиву, и считываем количество крестиков или ноликов
            int h = 0, v = 0;
            for (int j = 0; j < 5; j++) {
                if (table[i][j] == c) {
                    h++;                        // считываем крестики или нолики по строкам
                } else h--;                     // исключаем не последовательно идущие крестики или нолики
                if (table[j][i] == c) {
                    v++;                        // считываем крестики или нолики по столбцам
                } else v--;
                if ((h == 4) || (v == 4)) {
                    return true;                // победа если последовательно идут 4 символа крестиков или ноликов
                }
            }
        }
        int d1 = 0, d2 = 0;
        for (int i = 0; i < 5; i++) {
            if (table[i][i] == c) {
                d1++;                           // считываем крестики или нолики по диагонали
            } else d1--;
            if (table[i][4 - i] == c) {
                d2++;                           // считываем крестики или нолики по обратной диагонали
            } else d2--;
            if ((d1 == 4) || (d2 == 4)) {
                return true;                    // победа если последовательно идут 4 символа крестиков или ноликов
            }
        }
        return false;
    }  // Метод проверки победы игрока или компьютера

    private static void goesPlayer() {
        int x, y;
        do {
            System.out.println("Введите координаты в формате Х и У");
            x = sc.nextInt() - 1;
            y = sc.nextInt() - 1;


        } while (!isCellEmpty(x, y)); // пользователь вводит координаты до тех пор, пока не укажет на свободную ячейку
        table[y][x] = 'X'; // после чего ставим туда Х
    }   // ход игрока

    private static boolean fullTable() {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (table[i][j] == '*') return false;
            }
        }
        return true;
    }  // если на поле нашли хотя бы одну *, значит поле еще не заполнилось

    private static void goesComputer() {
        int x, y;
        do { // компьютер пытается случайно выбрать незанятое поле для хода
            x = rand.nextInt(5);
            y = rand.nextInt(5);
        } while (!isCellEmpty(x, y));
        table[y][x] = 'O'; // как только ячейка найдена, ставим туда О
    }

    public static boolean isCellEmpty(int x, int y) { // проверка является ли ячейка свободной
        if (x < 0 || x > 4 || y < 0 || y > 4)
            return false;
        if (table[y][x] != '*') return false;
        return true;
    } // проверка является ли ячейка свободной

}
