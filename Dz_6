package ru.geekbrains.java1.dz_Enver_Eskendarov.dz6;

public class Animal extends Checking {

    private double limitRun;
    private double limitJump;
    private double limitSwim;

    public Animal(double limitRun, double limitJump, double limitSwim) {
        this.limitRun = limitRun;
        this.limitJump = limitJump;
        this.limitSwim = limitSwim;
    }

    @Override
    public void run(double a) {
        System.out.println("the " + this.getClass().getSimpleName() + " will run " + a + " meters: " + (a <= limitRun));
    }

    @Override
    public void jump(double a) {
        System.out.println("the " + this.getClass().getSimpleName() + " will jump " + a + " meters: " + (a <= limitJump));
    }

    @Override
    public void swim(double a) {
        System.out.println("the " + this.getClass().getSimpleName() + " will swim " + a + " meters: " + (a <= limitSwim));
    }
}


abstract class Checking {
    public abstract void run(double a);

    public abstract void jump(double a);

    public abstract void swim(double a);
}




package ru.geekbrains.java1.dz_Enver_Eskendarov.dz6;

public class Dog extends Animal {

    public Dog(double limitRun, double limitJump, double limitSwim) {
        super(limitRun, limitJump, limitSwim);
    }
}



package ru.geekbrains.java1.dz_Enver_Eskendarov.dz6;

public class Cat extends Animal {

    public Cat(double limitRun, double limitJump, double limitSwim) {
        super(limitRun, limitJump, limitSwim);
    }
}



package ru.geekbrains.java1.dz_Enver_Eskendarov.dz6;

public class Dz_6 {
    public static void main(String[] args) {

        Dog dog1 = new Dog(500, 0.5, 10);
        Cat cat1 = new Cat(200, 2, 0);
        cat1.run(150);
        cat1.swim(3);
        cat1.jump(1.5);
        dog1.run(600);
        dog1.swim(9);
        dog1.jump(0.3);

    }
}
